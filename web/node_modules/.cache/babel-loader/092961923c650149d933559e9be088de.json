{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hyejin Kim\\\\Documents\\\\Programming\\\\Chatapp\\\\\\uC138\\uBC88\\uC9F8- \\uB9AC\\uC561\\uD2B8,CSS\\\\my-chat-app-3\\\\web\\\\src\\\\components\\\\TextEditor2.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState, useMemo } from 'react'; //이렇게 라이브러리를 불러와서 사용하면 됩니다\n\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditorComponent = () => {\n  _s();\n\n  const QuillRef = useRef();\n  const [contents, setContents] = useState(''); // 이미지를 업로드 하기 위한 함수\n\n  const imageHandler = () => {\n    // 파일을 업로드 하기 위한 input 태그 생성\n    const input = document.createElement('input');\n    const formData = new FormData();\n    let url = '';\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', 'image/*');\n    input.click(); // 파일이 input 태그에 담기면 실행 될 함수\n\n    input.onchange = async () => {\n      const file = input.files;\n\n      if (file !== null) {\n        formData.append('image', file[0]); // 저의 경우 파일 이미지를 서버에 저장했기 때문에\n        // 백엔드 개발자분과 통신을 통해 이미지를 저장하고 불러왔습니다.\n\n        try {\n          var _QuillRef$current, _QuillRef$current$get;\n\n          const res = axios; // 백엔드 개발자 분이 통신 성공시에 보내주는 이미지 url을 변수에 담는다.\n\n          url = res.data.url; // 커서의 위치를 알고 해당 위치에 이미지 태그를 넣어주는 코드\n          // 해당 DOM의 데이터가 필요하기에 useRef를 사용한다.\n\n          const range = (_QuillRef$current = QuillRef.current) === null || _QuillRef$current === void 0 ? void 0 : (_QuillRef$current$get = _QuillRef$current.getEditor().getSelection()) === null || _QuillRef$current$get === void 0 ? void 0 : _QuillRef$current$get.index;\n\n          if (range !== null && range !== undefined) {\n            var _QuillRef$current2;\n\n            let quill = (_QuillRef$current2 = QuillRef.current) === null || _QuillRef$current2 === void 0 ? void 0 : _QuillRef$current2.getEditor();\n            quill === null || quill === void 0 ? void 0 : quill.setSelection(range, 1);\n            quill === null || quill === void 0 ? void 0 : quill.clipboard.dangerouslyPasteHTML(range, `<img src=${url} alt=\"이미지 태그가 삽입됩니다.\" />`);\n          }\n\n          return { ...res,\n            success: true\n          };\n        } catch (error) {\n          const err = error;\n          return { ...err.response,\n            success: false\n          };\n        }\n      }\n    };\n  }; // quill에서 사용할 모듈을 설정하는 코드 입니다.\n  // 원하는 설정을 사용하면 되는데, 저는 아래와 같이 사용했습니다.\n  // useMemo를 사용하지 않으면, 키를 입력할 때마다, imageHandler 때문에 focus가 계속 풀리게 됩니다.\n\n\n  const modules = useMemo(() => ({\n    toolbar: {\n      container: [['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n        size: ['small', false, 'large', 'huge']\n      }, {\n        color: []\n      }], [{\n        list: 'ordered'\n      }, {\n        list: 'bullet'\n      }, {\n        indent: '-1'\n      }, {\n        indent: '+1'\n      }, {\n        align: []\n      }], ['image', 'video']],\n      handlers: {\n        image: imageHandler\n      }\n    }\n  }), []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ReactQuill, {\n      ref: element => {\n        if (element !== null) {\n          QuillRef.current = element;\n        }\n      },\n      value: contents,\n      onChange: setContents,\n      modules: modules,\n      theme: \"snow\",\n      placeholder: \"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(EditorComponent, \"TR5EbCMhmfdAVNYpy04QaMv1+o8=\");\n\n_c = EditorComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorComponent\");","map":{"version":3,"names":["useRef","useState","useMemo","ReactQuill","EditorComponent","QuillRef","contents","setContents","imageHandler","input","document","createElement","formData","FormData","url","setAttribute","click","onchange","file","files","append","res","axios","data","range","current","getEditor","getSelection","index","undefined","quill","setSelection","clipboard","dangerouslyPasteHTML","success","error","err","response","modules","toolbar","container","size","color","list","indent","align","handlers","image","element"],"sources":["C:/Users/Hyejin Kim/Documents/Programming/Chatapp/세번째- 리액트,CSS/my-chat-app-3/web/src/components/TextEditor2.js"],"sourcesContent":["import { useRef, useState, useMemo } from 'react';\r\n\r\n//이렇게 라이브러리를 불러와서 사용하면 됩니다\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nconst EditorComponent = () => {\r\n  const QuillRef = useRef();\r\n  const [contents, setContents] = useState('');\r\n\r\n  // 이미지를 업로드 하기 위한 함수\r\n  const imageHandler = () => {\r\n    // 파일을 업로드 하기 위한 input 태그 생성\r\n    const input = document.createElement('input');\r\n    const formData = new FormData();\r\n    let url = '';\r\n\r\n    input.setAttribute('type', 'file');\r\n    input.setAttribute('accept', 'image/*');\r\n    input.click();\r\n\r\n    // 파일이 input 태그에 담기면 실행 될 함수\r\n    input.onchange = async () => {\r\n      const file = input.files;\r\n      if (file !== null) {\r\n        formData.append('image', file[0]);\r\n\r\n        // 저의 경우 파일 이미지를 서버에 저장했기 때문에\r\n        // 백엔드 개발자분과 통신을 통해 이미지를 저장하고 불러왔습니다.\r\n        try {\r\n          const res = axios;\r\n\r\n          // 백엔드 개발자 분이 통신 성공시에 보내주는 이미지 url을 변수에 담는다.\r\n          url = res.data.url;\r\n\r\n          // 커서의 위치를 알고 해당 위치에 이미지 태그를 넣어주는 코드\r\n          // 해당 DOM의 데이터가 필요하기에 useRef를 사용한다.\r\n          const range = QuillRef.current?.getEditor().getSelection()?.index;\r\n          if (range !== null && range !== undefined) {\r\n            let quill = QuillRef.current?.getEditor();\r\n\r\n            quill?.setSelection(range, 1);\r\n\r\n            quill?.clipboard.dangerouslyPasteHTML(\r\n              range,\r\n              `<img src=${url} alt=\"이미지 태그가 삽입됩니다.\" />`\r\n            );\r\n          }\r\n\r\n          return { ...res, success: true };\r\n        } catch (error) {\r\n          const err = error;\r\n          return { ...err.response, success: false };\r\n        }\r\n      }\r\n    };\r\n  };\r\n\r\n  // quill에서 사용할 모듈을 설정하는 코드 입니다.\r\n  // 원하는 설정을 사용하면 되는데, 저는 아래와 같이 사용했습니다.\r\n  // useMemo를 사용하지 않으면, 키를 입력할 때마다, imageHandler 때문에 focus가 계속 풀리게 됩니다.\r\n  const modules = useMemo(\r\n    () => ({\r\n      toolbar: {\r\n        container: [\r\n          ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n          [{ size: ['small', false, 'large', 'huge'] }, { color: [] }],\r\n          [\r\n            { list: 'ordered' },\r\n            { list: 'bullet' },\r\n            { indent: '-1' },\r\n            { indent: '+1' },\r\n            { align: [] },\r\n          ],\r\n          ['image', 'video'],\r\n        ],\r\n        handlers: {\r\n          image: imageHandler,\r\n        },\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ReactQuill\r\n        ref={(element) => {\r\n          if (element !== null) {\r\n            QuillRef.current = element;\r\n          }\r\n        }}\r\n        value={contents}\r\n        onChange={setContents}\r\n        modules={modules}\r\n        theme=\"snow\"\r\n        placeholder=\"내용을 입력해주세요.\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,OAA3B,QAA0C,OAA1C,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,iCAAP;;;;AAEA,MAAMC,eAAe,GAAG,MAAM;EAAA;;EAC5B,MAAMC,QAAQ,GAAGL,MAAM,EAAvB;EACA,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC,CAF4B,CAI5B;;EACA,MAAMO,YAAY,GAAG,MAAM;IACzB;IACA,MAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;IACA,IAAIC,GAAG,GAAG,EAAV;IAEAL,KAAK,CAACM,YAAN,CAAmB,MAAnB,EAA2B,MAA3B;IACAN,KAAK,CAACM,YAAN,CAAmB,QAAnB,EAA6B,SAA7B;IACAN,KAAK,CAACO,KAAN,GARyB,CAUzB;;IACAP,KAAK,CAACQ,QAAN,GAAiB,YAAY;MAC3B,MAAMC,IAAI,GAAGT,KAAK,CAACU,KAAnB;;MACA,IAAID,IAAI,KAAK,IAAb,EAAmB;QACjBN,QAAQ,CAACQ,MAAT,CAAgB,OAAhB,EAAyBF,IAAI,CAAC,CAAD,CAA7B,EADiB,CAGjB;QACA;;QACA,IAAI;UAAA;;UACF,MAAMG,GAAG,GAAGC,KAAZ,CADE,CAGF;;UACAR,GAAG,GAAGO,GAAG,CAACE,IAAJ,CAAST,GAAf,CAJE,CAMF;UACA;;UACA,MAAMU,KAAK,wBAAGnB,QAAQ,CAACoB,OAAZ,+EAAG,kBAAkBC,SAAlB,GAA8BC,YAA9B,EAAH,0DAAG,sBAA8CC,KAA5D;;UACA,IAAIJ,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKK,SAAhC,EAA2C;YAAA;;YACzC,IAAIC,KAAK,yBAAGzB,QAAQ,CAACoB,OAAZ,uDAAG,mBAAkBC,SAAlB,EAAZ;YAEAI,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,YAAP,CAAoBP,KAApB,EAA2B,CAA3B;YAEAM,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,SAAP,CAAiBC,oBAAjB,CACET,KADF,EAEG,YAAWV,GAAI,0BAFlB;UAID;;UAED,OAAO,EAAE,GAAGO,GAAL;YAAUa,OAAO,EAAE;UAAnB,CAAP;QACD,CArBD,CAqBE,OAAOC,KAAP,EAAc;UACd,MAAMC,GAAG,GAAGD,KAAZ;UACA,OAAO,EAAE,GAAGC,GAAG,CAACC,QAAT;YAAmBH,OAAO,EAAE;UAA5B,CAAP;QACD;MACF;IACF,CAjCD;EAkCD,CA7CD,CAL4B,CAoD5B;EACA;EACA;;;EACA,MAAMI,OAAO,GAAGpC,OAAO,CACrB,OAAO;IACLqC,OAAO,EAAE;MACPC,SAAS,EAAE,CACT,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB,EAAgC,QAAhC,EAA0C,YAA1C,CADS,EAET,CAAC;QAAEC,IAAI,EAAE,CAAC,OAAD,EAAU,KAAV,EAAiB,OAAjB,EAA0B,MAA1B;MAAR,CAAD,EAA8C;QAAEC,KAAK,EAAE;MAAT,CAA9C,CAFS,EAGT,CACE;QAAEC,IAAI,EAAE;MAAR,CADF,EAEE;QAAEA,IAAI,EAAE;MAAR,CAFF,EAGE;QAAEC,MAAM,EAAE;MAAV,CAHF,EAIE;QAAEA,MAAM,EAAE;MAAV,CAJF,EAKE;QAAEC,KAAK,EAAE;MAAT,CALF,CAHS,EAUT,CAAC,OAAD,EAAU,OAAV,CAVS,CADJ;MAaPC,QAAQ,EAAE;QACRC,KAAK,EAAEvC;MADC;IAbH;EADJ,CAAP,CADqB,EAoBrB,EApBqB,CAAvB;EAuBA,oBACE;IAAA,uBACE,QAAC,UAAD;MACE,GAAG,EAAGwC,OAAD,IAAa;QAChB,IAAIA,OAAO,KAAK,IAAhB,EAAsB;UACpB3C,QAAQ,CAACoB,OAAT,GAAmBuB,OAAnB;QACD;MACF,CALH;MAME,KAAK,EAAE1C,QANT;MAOE,QAAQ,EAAEC,WAPZ;MAQE,OAAO,EAAE+B,OARX;MASE,KAAK,EAAC,MATR;MAUE,WAAW,EAAC;IAVd;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAgBD,CA9FD;;GAAMlC,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}